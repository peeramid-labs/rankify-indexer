type DAODistributor_Debug {
  id: ID!
  distributorsId: String!
  args: String!
}

type DAODistributor_DefaultAdminDelayChangeCanceled {
  id: ID!
}

type DAODistributor_DefaultAdminDelayChangeScheduled {
  id: ID!
  newDelay: BigInt!
  effectSchedule: BigInt!
}

type DAODistributor_DefaultAdminTransferCanceled {
  id: ID!
}

type DAODistributor_DefaultAdminTransferScheduled {
  id: ID!
  newAdmin: String!
  acceptSchedule: BigInt!
}

type DAODistributor_DistributionAdded {
  id: ID!
  event_id: String!
  distribution: String!
  initializer: String!
}

type DAODistributor_DistributionRemoved {
  id: ID!
  event_id: String!
}

type DAODistributor_Instantiated {
  id: ID!
  distributionId: String!
  newInstanceId: BigInt!
  version: BigInt!
  instances: [String!]!
  args: String!
}

type DAODistributor_InstantiationCostChanged {
  id: ID!
  event_id: String!
  cost: BigInt!
}

type DAODistributor_RoleAdminChanged {
  id: ID!
  role: String!
  previousAdminRole: String!
  newAdminRole: String!
}

type DAODistributor_RoleGranted {
  id: ID!
  role: String!
  account: String!
  sender: String!
}

type DAODistributor_RoleRevoked {
  id: ID!
  role: String!
  account: String!
  sender: String!
}

type DAODistributor_VersionChanged {
  id: ID!
  distributionId: String!
  newRequirement_0_0: BigInt!
  newRequirement_0_1: BigInt!
  newRequirement_0_2: BigInt!
  newRequirement_1: BigInt!
  newRequirementData_0_0: BigInt!
  newRequirementData_0_1: BigInt!
  newRequirementData_0_2: BigInt!
  newRequirementData_1: BigInt!
}

type IssuanceCurve_Buy {
  id: ID!
  buyer: String!
  amount: BigInt!
  cost: BigInt!
}

type RankToken_ApprovalForAll {
  id: ID!
  account: String!
  operator: String!
  approved: Boolean!
}

type RankToken_Initialized {
  id: ID!
  version: BigInt!
}

type RankToken_RankingInstanceUpdated {
  id: ID!
  newRankingInstance: String!
}

type RankToken_TokensLocked {
  id: ID!
  account: String!
  event_id: BigInt!
  value: BigInt!
}

type RankToken_TokensUnlocked {
  id: ID!
  account: String!
  event_id: BigInt!
  value: BigInt!
}

type RankToken_TransferBatch {
  id: ID!
  operator: String!
  from: String!
  to: String!
  ids: [BigInt!]!
  values: [BigInt!]!
}

type RankToken_TransferSingle {
  id: ID!
  operator: String!
  from: String!
  to: String!
  event_id: BigInt!
  value: BigInt!
}

type RankToken_URI {
  id: ID!
  value: String!
  event_id: BigInt!
}

type RankifyInstance_GameClosed {
  id: ID!
  gameId: BigInt!
}

type RankifyInstance_GameOver {
  id: ID!
  gameId: BigInt!
  players: [String!]!
  scores: [BigInt!]!
}

type RankifyInstance_GameStarted {
  id: ID!
  gameId: BigInt!
}

type RankifyInstance_LastTurn {
  id: ID!
  gameId: BigInt!
}

type RankifyInstance_OverTime {
  id: ID!
  gameId: BigInt!
}

type RankifyInstance_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type RankifyInstance_PlayerJoined {
  id: ID!
  gameId: BigInt!
  participant: String!
  gmCommitment: String!
  voterPubKey: String!
}

type RankifyInstance_PlayerLeft {
  id: ID!
  gameId: BigInt!
  player: String!
}

type RankifyInstance_ProposalScore {
  id: ID!
  gameId: BigInt!
  turn: BigInt!
  proposalHash: String!
  proposal: String!
  score: BigInt!
}

type RankifyInstance_ProposalSubmitted {
  id: ID!
  gameId: BigInt!
  turn: BigInt!
  proposer: String!
  commitment: BigInt!
  encryptedProposal: String!
  gmSignature: String!
  proposerSignature: String!
}

type RankifyInstance_RankTokenExited {
  id: ID!
  player: String!
  rankId: BigInt!
  amount: BigInt!
  _toMint: BigInt!
}

type RankifyInstance_RegistrationOpen {
  id: ID!
  gameId: BigInt!
}

type RankifyInstance_VoteSubmitted {
  id: ID!
  gameId: BigInt!
  turn: BigInt!
  player: String!
  sealedBallotId: String!
  gmSignature: String!
  voterSignature: String!
  ballotHash: String!
}

type RankifyInstance_gameCreated {
  id: ID!
  gameId: BigInt!
  gm: String!
  creator: String!
  rank: BigInt!
}

type RankifyToken_Approval {
  id: ID!
  owner: String!
  spender: String!
  value: BigInt!
}

type RankifyToken_DelegateChanged {
  id: ID!
  delegator: String!
  fromDelegate: String!
  toDelegate: String!
}

type RankifyToken_DelegateVotesChanged {
  id: ID!
  delegate: String!
  previousVotes: BigInt!
  newVotes: BigInt!
}

type RankifyToken_EIP712DomainChanged {
  id: ID!
}

type RankifyToken_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type RankifyToken_Transfer {
  id: ID!
  from: String!
  to: String!
  value: BigInt!
}

